// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Css.flex

package com.tcpip147.vscodelanguage.css.language;

import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.tcpip147.vscodelanguage.css.language.psi.CssTypes.*;


public class CssLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\4\22\0\1\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\10\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\0\1\42"+
    "\10\0\1\43\21\0\1\44\1\45\1\46\1\0\1\47"+
    "\1\0\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\47\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\47\1\67\1\70\1\71\1\72\2\47\1\73"+
    "\1\47\1\74\1\75\1\76\1\77\1\100\41\0\140\101"+
    "\u0100\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\4\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\1\1\10\1\11\1\12\1\13\1\14\1\1"+
    "\1\15\1\16\1\1\1\17\1\20\1\1\1\21\2\17"+
    "\1\22\1\1\1\23\1\1\5\0\1\24\1\0\1\25"+
    "\2\0\1\24\4\0\1\12\1\0\1\26\13\0\1\27"+
    "\6\0\3\17\1\0\1\17\1\30\1\31\6\0\1\24"+
    "\1\0\1\25\2\0\1\32\5\0\1\33\3\0\1\34"+
    "\1\35\2\0\1\36\21\0\7\17\1\0\1\17\10\0"+
    "\2\25\1\0\1\37\13\0\1\27\5\0\1\40\23\0"+
    "\1\41\21\0\12\17\12\0\1\25\14\0\1\27\1\0"+
    "\1\33\5\0\1\34\1\35\2\0\1\36\36\0\1\42"+
    "\13\17\3\0\1\43\13\0\1\25\3\0\1\33\3\0"+
    "\1\40\1\0\1\34\1\35\2\0\1\36\30\0\1\44"+
    "\6\0\12\17\17\0\1\25\4\0\1\40\22\0\1\45"+
    "\13\0\1\42\7\17\3\0\1\43\16\0\1\25\3\0"+
    "\1\46\13\0\1\44\2\0\1\42\3\17\1\43\20\0"+
    "\1\45\2\0\1\44\1\0\1\17\13\0\1\47\2\0"+
    "\1\45\23\0\1\47\4\0\1\47\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[517];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\102"+
    "\0\102\0\102\0\u01ce\0\102\0\u0210\0\u0252\0\u0294\0\u02d6"+
    "\0\102\0\102\0\u0318\0\102\0\102\0\u035a\0\u039c\0\102"+
    "\0\u03de\0\102\0\u0420\0\u0462\0\102\0\u04a4\0\102\0\u04e6"+
    "\0\306\0\u0528\0\u056a\0\u05ac\0\u0108\0\102\0\u05ee\0\u014a"+
    "\0\u0630\0\u018c\0\u018c\0\u0672\0\u0252\0\u06b4\0\u06f6\0\u0738"+
    "\0\u077a\0\102\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906"+
    "\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\102\0\u0a92\0\u0ad4"+
    "\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4"+
    "\0\u0d26\0\102\0\102\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70"+
    "\0\u0eb2\0\u0108\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\102\0\u0ffc"+
    "\0\u103e\0\u1080\0\u10c2\0\u1104\0\102\0\u1146\0\u1188\0\u11ca"+
    "\0\102\0\102\0\u120c\0\u124e\0\102\0\u1290\0\u12d2\0\u1314"+
    "\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524"+
    "\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734"+
    "\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944"+
    "\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54"+
    "\0\u1b96\0\u1bd8\0\102\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22"+
    "\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32"+
    "\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\102\0\u207c\0\u20be\0\u2100"+
    "\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310"+
    "\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520"+
    "\0\102\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee"+
    "\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a\0\u28bc\0\u28fe"+
    "\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e"+
    "\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e"+
    "\0\u2d60\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e"+
    "\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u30ba\0\u30fc\0\u313e"+
    "\0\u3180\0\u31c2\0\u3204\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e"+
    "\0\u3390\0\u33d2\0\u3414\0\u3456\0\u3498\0\u34da\0\u351c\0\u355e"+
    "\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8\0\u36ea\0\u372c\0\u376e"+
    "\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa\0\u393c\0\u397e"+
    "\0\u39c0\0\u3a02\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e"+
    "\0\u3bd0\0\u3c12\0\u3c54\0\u3c96\0\u3cd8\0\u3d1a\0\102\0\u3d5c"+
    "\0\u3d9e\0\u3de0\0\u3e22\0\u3e64\0\u3ea6\0\u3ee8\0\u3f2a\0\u3f6c"+
    "\0\u3fae\0\u3ff0\0\u4032\0\u4074\0\u40b6\0\102\0\u40f8\0\u413a"+
    "\0\u417c\0\u41be\0\u4200\0\u4242\0\u4284\0\u42c6\0\u4308\0\u434a"+
    "\0\u438c\0\u43ce\0\u4410\0\u4452\0\u4494\0\u44d6\0\u4518\0\u455a"+
    "\0\u459c\0\u45de\0\u4620\0\u4662\0\u46a4\0\u46e6\0\u4728\0\u476a"+
    "\0\u47ac\0\u47ee\0\u4830\0\u4872\0\u48b4\0\u48f6\0\u4938\0\u497a"+
    "\0\u49bc\0\u49fe\0\u4a40\0\u4a82\0\u4ac4\0\u4b06\0\u4b48\0\u4b8a"+
    "\0\u4bcc\0\u4c0e\0\u4c50\0\u4c92\0\u4cd4\0\u4d16\0\u4d58\0\u4d9a"+
    "\0\102\0\u4ddc\0\u4e1e\0\u4e60\0\u4ea2\0\u4ee4\0\u4f26\0\u4f68"+
    "\0\u4faa\0\u4fec\0\u502e\0\u5070\0\u50b2\0\u50f4\0\u5136\0\u5178"+
    "\0\u51ba\0\u51fc\0\u523e\0\u5280\0\u52c2\0\u5304\0\u5346\0\u5388"+
    "\0\u53ca\0\u540c\0\u544e\0\u5490\0\u54d2\0\u5514\0\u5556\0\u5598"+
    "\0\u55da\0\u561c\0\u565e\0\u56a0\0\u56e2\0\u5724\0\u5766\0\u57a8"+
    "\0\u57ea\0\u582c\0\u586e\0\u58b0\0\u58f2\0\u5934\0\u5976\0\u59b8"+
    "\0\u59fa\0\u5a3c\0\u5a7e\0\u5ac0\0\u5b02\0\u5b44\0\u5b86\0\u5bc8"+
    "\0\102\0\u5c0a\0\u5c4c\0\u5c8e\0\u5cd0\0\u5d12\0\u5d54\0\u5d96"+
    "\0\u5dd8\0\u5e1a\0\u5e5c\0\u5e9e\0\u5ee0\0\u5f22\0\u5f64\0\u5fa6"+
    "\0\u5fe8\0\u602a\0\u606c\0\u60ae\0\u60f0\0\u6132\0\u6174\0\u40b6"+
    "\0\u61b6\0\u61f8\0\u623a\0\u627c\0\u62be\0\u6300\0\u6342\0\u6384"+
    "\0\u63c6\0\u6408\0\u644a\0\u648c\0\u64ce\0\u6510\0\u6552\0\u6594"+
    "\0\u65d6\0\u6618\0\102\0\u665a\0\u669c\0\u66de\0\u6720\0\u6762"+
    "\0\u67a4\0\u67e6\0\u6828\0\u686a\0\u68ac\0\u68ee\0\u6930\0\u6972"+
    "\0\u69b4\0\u69f6\0\u6a38\0\u6a7a\0\u6abc\0\u4074\0\u6afe\0\u6b40"+
    "\0\u6b82\0\u6bc4\0\u6c06\0\u6c48\0\u6c8a\0\u6ccc\0\u6d0e\0\u6d50"+
    "\0\u6d92\0\u6dd4\0\u6e16\0\u6e58\0\u6e9a\0\u6edc\0\u6f1e\0\u6f60"+
    "\0\u6fa2\0\u6fe4\0\u7026\0\u7068\0\u70aa\0\u70ec\0\u712e\0\u7170"+
    "\0\u71b2\0\u71f4\0\u7236\0\u7278\0\u72ba\0\u72fc\0\u733e\0\102"+
    "\0\u7380\0\u73c2\0\u7404\0\u7446\0\u7488\0\u74ca\0\u750c\0\u754e"+
    "\0\u7590\0\u75d2\0\u7614\0\u7656\0\u7698\0\u76da\0\u771c\0\u775e"+
    "\0\u77a0\0\u77e2\0\u7824\0\u7866\0\u78a8\0\u78ea\0\u792c\0\u796e"+
    "\0\u79b0\0\u79f2\0\u7a34\0\u7a76\0\u7ab8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[517];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\1\6\2\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\12\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\23\33\1\34\2\33\1\35\1\36\1\37"+
    "\1\40\1\33\103\0\4\3\76\0\4\41\15\0\1\42"+
    "\22\0\1\43\12\0\1\44\21\0\2\45\3\0\1\45"+
    "\1\46\36\45\1\47\34\45\20\0\1\50\2\0\12\50"+
    "\6\0\1\50\1\0\1\51\1\0\26\50\4\0\1\50"+
    "\2\52\3\0\1\52\1\0\3\52\1\53\32\52\1\54"+
    "\34\52\21\0\1\55\1\0\12\20\6\0\1\20\56\0"+
    "\1\56\1\55\1\0\12\20\6\0\1\27\1\0\1\57"+
    "\1\0\26\33\4\0\1\33\23\0\12\60\62\0\1\61"+
    "\75\0\1\62\7\0\1\55\1\0\12\20\6\0\1\20"+
    "\1\0\1\63\4\0\1\64\1\65\1\66\1\0\1\67"+
    "\1\70\1\71\1\72\1\0\1\73\2\0\1\74\1\75"+
    "\1\76\16\0\1\77\141\0\1\100\4\0\1\101\5\0"+
    "\1\102\2\0\1\103\2\0\1\104\24\0\1\62\6\0"+
    "\1\33\1\55\1\0\12\27\6\0\1\27\1\0\1\57"+
    "\1\0\26\33\4\0\3\33\3\0\16\33\1\105\4\106"+
    "\1\107\1\106\1\107\2\106\13\33\6\106\14\33\1\34"+
    "\7\33\20\0\1\33\2\0\12\33\6\0\1\33\1\0"+
    "\1\57\1\0\26\33\4\0\1\33\20\0\1\33\2\0"+
    "\12\33\6\0\1\33\1\0\1\110\1\0\20\33\1\111"+
    "\5\33\4\0\1\33\40\0\1\112\101\0\1\113\56\0"+
    "\1\114\107\0\1\115\3\0\1\116\1\0\1\116\26\0"+
    "\1\44\66\0\1\117\15\0\1\120\16\0\4\45\1\121"+
    "\1\45\1\122\14\45\12\123\10\45\1\47\2\45\6\123"+
    "\24\45\2\50\3\0\16\50\12\124\13\50\6\124\24\50"+
    "\4\52\1\125\5\52\1\53\10\52\12\126\10\52\1\54"+
    "\2\52\6\126\24\52\41\0\1\127\40\0\2\33\3\0"+
    "\16\33\12\106\13\33\6\106\24\33\11\0\1\62\11\0"+
    "\12\60\10\0\1\63\4\0\1\64\1\65\1\66\1\0"+
    "\1\67\1\70\1\71\1\72\1\0\1\73\2\0\1\74"+
    "\1\75\1\76\11\0\15\61\1\130\64\61\23\0\1\131"+
    "\3\0\1\132\1\133\1\132\1\133\23\0\1\67\1\70"+
    "\1\71\1\72\1\0\1\73\2\0\1\74\1\75\1\76"+
    "\56\0\1\134\15\0\1\135\63\0\1\136\6\0\1\137"+
    "\72\0\1\140\15\0\1\141\7\0\1\142\53\0\1\143"+
    "\21\0\1\75\57\0\1\144\26\0\1\145\52\0\1\146"+
    "\16\0\1\135\62\0\1\147\11\0\1\70\67\0\1\150"+
    "\15\0\1\135\4\0\1\76\56\0\1\151\4\0\1\135"+
    "\16\0\1\135\1\0\1\135\53\0\1\152\2\0\1\153"+
    "\51\0\1\154\104\0\1\155\3\0\1\156\1\157\1\156"+
    "\1\157\25\0\1\102\2\0\1\103\2\0\1\104\72\0"+
    "\1\160\67\0\1\161\15\0\1\162\63\0\1\163\6\0"+
    "\1\164\72\0\1\165\2\0\1\166\32\0\3\33\1\167"+
    "\13\0\1\33\2\0\1\170\4\171\1\172\1\171\1\172"+
    "\2\171\6\0\1\33\1\0\1\57\1\0\1\33\6\171"+
    "\17\33\4\0\1\33\1\0\3\33\1\167\13\0\1\33"+
    "\2\0\12\171\6\0\1\33\1\0\1\57\1\0\1\33"+
    "\6\171\17\33\4\0\1\33\1\0\3\33\1\167\13\0"+
    "\1\33\2\0\5\171\1\173\4\171\6\0\1\33\1\0"+
    "\1\57\1\0\1\33\6\171\17\33\4\0\3\33\3\0"+
    "\16\33\1\174\4\106\1\175\1\106\1\175\2\106\13\33"+
    "\6\106\11\33\1\111\12\33\20\0\1\33\2\0\12\33"+
    "\6\0\1\33\1\0\1\176\1\0\13\33\1\177\12\33"+
    "\4\0\1\33\15\114\1\200\64\114\23\0\1\201\3\0"+
    "\1\116\1\0\1\116\104\0\1\202\70\0\1\203\3\0"+
    "\1\204\1\0\1\204\31\0\1\120\63\0\1\205\20\0"+
    "\1\206\13\0\3\45\2\0\1\45\1\46\36\45\1\47"+
    "\40\45\1\121\1\45\1\46\14\45\12\207\10\45\1\47"+
    "\2\45\6\207\24\45\1\0\3\50\1\210\13\0\1\50"+
    "\2\0\12\211\6\0\1\50\1\0\1\51\1\0\1\50"+
    "\6\211\17\50\4\0\1\50\3\52\2\0\1\52\1\0"+
    "\3\52\1\53\32\52\1\54\40\52\1\125\1\52\1\0"+
    "\3\52\1\53\10\52\12\212\10\52\1\54\2\52\6\212"+
    "\24\52\15\61\1\130\4\61\1\213\57\61\23\0\1\214"+
    "\3\0\1\132\1\133\1\132\1\133\75\0\1\215\1\216"+
    "\1\217\1\0\1\220\1\221\1\222\14\0\1\223\1\0"+
    "\1\224\51\0\1\225\1\0\1\226\1\227\76\0\1\230"+
    "\3\0\1\231\1\0\1\231\31\0\1\135\41\0\1\232"+
    "\3\0\1\233\1\0\1\233\115\0\1\234\10\0\1\235"+
    "\46\0\1\236\3\0\1\237\1\240\1\237\1\240\30\0"+
    "\1\141\7\0\1\142\31\0\1\241\4\0\1\242\1\0"+
    "\1\242\34\0\1\75\35\0\1\243\4\0\1\244\1\0"+
    "\1\244\41\0\1\145\30\0\1\245\3\0\1\246\1\0"+
    "\1\246\32\0\1\135\40\0\1\247\3\0\1\250\1\0"+
    "\1\250\25\0\1\70\45\0\1\251\3\0\1\231\1\252"+
    "\1\231\1\252\30\0\1\135\4\0\1\76\34\0\1\253"+
    "\3\0\1\254\1\255\1\254\1\255\36\0\1\135\1\0"+
    "\1\135\31\0\1\256\3\0\1\257\1\0\1\257\115\0"+
    "\1\260\5\0\1\235\46\0\1\261\104\0\1\262\3\0"+
    "\1\156\1\157\1\156\1\157\103\0\1\263\16\0\1\264"+
    "\51\0\1\265\126\0\1\266\54\0\1\267\3\0\1\270"+
    "\1\0\1\270\31\0\1\162\63\0\1\271\20\0\1\272"+
    "\36\0\1\273\3\0\1\274\1\0\1\274\115\0\1\275"+
    "\5\0\1\276\51\0\1\277\3\0\1\300\1\0\1\300"+
    "\115\0\1\301\10\0\1\302\25\0\1\33\15\0\1\33"+
    "\2\0\12\33\6\0\1\33\1\0\1\57\1\0\26\33"+
    "\4\0\1\33\1\0\3\33\1\167\13\0\1\33\2\0"+
    "\1\303\4\304\1\305\1\304\1\305\2\304\6\0\1\33"+
    "\1\0\1\57\1\0\1\33\6\304\17\33\4\0\1\33"+
    "\1\0\3\33\1\167\13\0\1\33\2\0\12\304\6\0"+
    "\1\33\1\0\1\57\1\0\1\33\6\304\17\33\4\0"+
    "\1\33\1\0\3\33\1\167\13\0\1\33\2\0\5\304"+
    "\1\306\4\304\6\0\1\33\1\0\1\57\1\0\1\33"+
    "\6\304\17\33\4\0\1\33\1\0\3\34\1\307\13\0"+
    "\1\33\2\0\12\304\6\0\1\33\1\0\1\110\1\0"+
    "\1\33\6\304\11\33\1\111\5\33\4\0\1\33\1\0"+
    "\3\33\1\167\13\0\1\33\2\0\1\310\4\171\1\311"+
    "\1\171\1\311\2\171\6\0\1\33\1\0\1\57\1\0"+
    "\1\33\6\171\17\33\4\0\1\33\1\0\3\33\1\167"+
    "\13\0\1\33\2\0\2\171\1\312\7\171\6\0\1\33"+
    "\1\0\1\57\1\0\1\33\6\171\17\33\4\0\3\33"+
    "\3\0\16\33\1\313\3\106\1\314\1\106\1\314\3\106"+
    "\13\33\6\106\4\33\1\177\17\33\13\0\1\315\4\0"+
    "\1\33\2\0\12\33\6\0\1\33\1\0\1\57\1\0"+
    "\26\33\4\0\1\33\15\114\1\200\4\114\1\41\57\114"+
    "\23\0\1\316\3\0\1\116\1\0\1\116\51\0\3\44"+
    "\1\317\40\0\1\117\15\0\1\120\41\0\1\320\3\0"+
    "\1\204\1\0\1\204\123\0\1\321\51\0\1\322\4\0"+
    "\1\323\1\0\1\323\33\0\1\206\60\0\1\324\17\0"+
    "\1\325\14\0\4\45\1\121\1\45\1\46\14\45\12\326"+
    "\10\45\1\47\2\45\6\326\24\45\2\0\1\50\15\0"+
    "\1\50\2\0\12\50\6\0\1\50\1\0\1\51\1\0"+
    "\26\50\4\0\1\50\1\0\3\50\1\210\13\0\1\50"+
    "\2\0\12\327\6\0\1\50\1\0\1\51\1\0\1\50"+
    "\6\327\17\50\4\0\1\50\4\52\1\125\1\52\1\0"+
    "\3\52\1\53\10\52\12\330\10\52\1\54\2\52\6\330"+
    "\24\52\23\0\1\331\3\0\1\132\1\133\1\132\1\133"+
    "\50\0\3\64\1\332\40\0\1\134\15\0\1\135\17\0"+
    "\3\65\1\333\40\0\1\136\6\0\1\137\26\0\3\66"+
    "\1\334\40\0\1\140\15\0\1\141\7\0\1\142\7\0"+
    "\3\67\1\335\40\0\1\143\21\0\1\75\13\0\3\70"+
    "\1\336\40\0\1\144\26\0\1\145\6\0\3\71\1\337"+
    "\40\0\1\146\16\0\1\135\16\0\3\72\1\340\40\0"+
    "\1\147\11\0\1\70\23\0\3\73\1\341\40\0\1\150"+
    "\15\0\1\135\4\0\1\76\12\0\3\74\1\342\40\0"+
    "\1\151\4\0\1\135\16\0\1\135\1\0\1\135\7\0"+
    "\3\75\1\343\40\0\1\152\2\0\1\153\32\0\3\76"+
    "\1\344\120\0\1\345\3\0\1\231\1\0\1\231\123\0"+
    "\1\346\51\0\1\347\3\0\1\233\1\0\1\233\100\0"+
    "\1\350\74\0\1\351\3\0\1\352\1\0\1\352\24\0"+
    "\1\235\46\0\1\353\3\0\1\237\1\240\1\237\1\240"+
    "\122\0\1\354\61\0\1\355\71\0\1\356\4\0\1\242"+
    "\1\0\1\242\74\0\1\226\77\0\1\357\4\0\1\244"+
    "\1\0\1\244\117\0\1\360\54\0\1\361\3\0\1\246"+
    "\1\0\1\246\124\0\1\346\50\0\1\362\3\0\1\250"+
    "\1\0\1\250\103\0\1\221\71\0\1\363\3\0\1\231"+
    "\1\252\1\231\1\252\75\0\1\227\76\0\1\364\3\0"+
    "\1\254\1\255\1\254\1\255\75\0\1\346\102\0\1\346"+
    "\3\0\1\346\71\0\1\365\3\0\1\257\1\0\1\257"+
    "\74\0\1\366\100\0\1\367\3\0\1\370\1\0\1\370"+
    "\73\0\1\371\3\0\1\156\1\157\1\156\1\157\50\0"+
    "\3\102\1\372\40\0\1\161\15\0\1\162\17\0\3\103"+
    "\1\373\40\0\1\163\6\0\1\164\26\0\3\104\1\374"+
    "\40\0\1\165\2\0\1\166\120\0\1\375\35\0\1\376"+
    "\3\0\1\270\1\0\1\270\123\0\1\377\51\0\1\u0100"+
    "\4\0\1\u0101\1\0\1\u0101\33\0\1\272\60\0\1\u0102"+
    "\17\0\1\u0103\37\0\1\u0104\3\0\1\274\1\0\1\274"+
    "\100\0\1\u0105\74\0\1\u0106\3\0\1\u0107\1\0\1\u0107"+
    "\115\0\1\u0108\12\0\1\u0109\44\0\1\u010a\3\0\1\300"+
    "\1\0\1\300\74\0\1\u010b\100\0\1\u010c\3\0\1\u010d"+
    "\1\0\1\u010d\24\0\1\302\70\0\1\u010e\6\0\1\u010f"+
    "\26\0\3\33\1\167\13\0\1\33\2\0\1\u0110\4\u0111"+
    "\1\u0112\1\u0111\1\u0112\2\u0111\6\0\1\33\1\0\1\57"+
    "\1\0\1\33\6\u0111\17\33\4\0\1\33\1\0\3\33"+
    "\1\167\13\0\1\33\2\0\12\u0111\6\0\1\33\1\0"+
    "\1\57\1\0\1\33\6\u0111\17\33\4\0\1\33\1\0"+
    "\3\33\1\167\13\0\1\33\2\0\5\u0111\1\u0113\4\u0111"+
    "\6\0\1\33\1\0\1\57\1\0\1\33\6\u0111\17\33"+
    "\4\0\1\33\1\0\3\34\1\307\13\0\1\33\2\0"+
    "\12\u0111\6\0\1\33\1\0\1\110\1\0\1\33\6\u0111"+
    "\11\33\1\111\5\33\4\0\1\33\2\0\1\34\15\0"+
    "\1\33\2\0\12\33\6\0\1\33\1\0\1\110\1\0"+
    "\20\33\1\111\5\33\4\0\1\33\1\0\3\33\1\167"+
    "\13\0\1\33\2\0\1\u0114\4\304\1\u0115\1\304\1\u0115"+
    "\2\304\6\0\1\33\1\0\1\57\1\0\1\33\6\304"+
    "\17\33\4\0\1\33\1\0\3\33\1\167\13\0\1\33"+
    "\2\0\2\304\1\u0116\7\304\6\0\1\33\1\0\1\57"+
    "\1\0\1\33\6\304\17\33\4\0\1\33\1\0\3\111"+
    "\1\u0117\13\0\1\33\2\0\12\304\6\0\1\33\1\0"+
    "\1\176\1\0\1\33\6\304\4\33\1\177\12\33\4\0"+
    "\1\33\1\0\3\33\1\167\13\0\1\33\2\0\1\u0118"+
    "\3\171\1\u0119\1\171\1\u0119\3\171\6\0\1\33\1\0"+
    "\1\57\1\0\1\33\6\171\17\33\4\0\1\33\1\0"+
    "\3\33\1\167\13\0\1\33\2\0\12\171\6\0\1\33"+
    "\1\0\1\57\1\0\1\33\2\171\1\u011a\3\171\17\33"+
    "\4\0\1\33\1\0\4\315\1\u011b\1\u011c\3\u011b\1\u011d"+
    "\1\0\1\u011e\1\u011b\2\0\1\u011b\24\0\1\u011f\32\0"+
    "\2\u011b\23\0\1\u0120\3\0\1\116\1\0\1\116\52\0"+
    "\1\44\42\0\1\117\15\0\1\120\41\0\1\u0121\3\0"+
    "\1\204\1\0\1\204\51\0\3\120\1\u0122\40\0\1\205"+
    "\20\0\1\206\36\0\1\u0123\4\0\1\323\1\0\1\323"+
    "\72\0\1\u0124\101\0\1\u0125\3\0\1\u0126\1\0\1\u0126"+
    "\33\0\1\325\61\0\1\u0127\21\0\1\u0128\12\0\4\45"+
    "\1\121\1\45\1\46\14\45\12\u0129\10\45\1\47\2\45"+
    "\6\u0129\24\45\1\0\3\50\1\210\13\0\1\50\2\0"+
    "\12\u012a\6\0\1\50\1\0\1\51\1\0\1\50\6\u012a"+
    "\17\50\4\0\1\50\4\52\1\125\1\52\1\0\3\52"+
    "\1\53\10\52\12\u012b\10\52\1\54\2\52\6\u012b\24\52"+
    "\23\0\1\u012c\3\0\1\132\1\133\1\132\1\133\51\0"+
    "\1\64\42\0\1\134\15\0\1\135\20\0\1\65\42\0"+
    "\1\136\6\0\1\137\27\0\1\66\42\0\1\140\15\0"+
    "\1\141\7\0\1\142\10\0\1\67\42\0\1\143\21\0"+
    "\1\75\14\0\1\70\42\0\1\144\26\0\1\145\7\0"+
    "\1\71\42\0\1\146\16\0\1\135\17\0\1\72\42\0"+
    "\1\147\11\0\1\70\24\0\1\73\42\0\1\150\15\0"+
    "\1\135\4\0\1\76\13\0\1\74\42\0\1\151\4\0"+
    "\1\135\16\0\1\135\1\0\1\135\10\0\1\75\42\0"+
    "\1\152\2\0\1\153\33\0\1\76\122\0\1\u012d\3\0"+
    "\1\231\1\0\1\231\51\0\3\135\1\u012e\120\0\1\u012f"+
    "\3\0\1\233\1\0\1\233\51\0\3\137\1\u0130\40\0"+
    "\1\234\10\0\1\235\46\0\1\u0131\3\0\1\352\1\0"+
    "\1\352\102\0\1\u0132\72\0\1\u0133\3\0\1\237\1\240"+
    "\1\237\1\240\50\0\3\141\1\u0134\76\0\3\142\1\u0135"+
    "\120\0\1\u0136\4\0\1\242\1\0\1\242\72\0\1\u0137"+
    "\4\0\1\244\1\0\1\244\50\0\3\145\1\u0138\120\0"+
    "\1\u0139\3\0\1\246\1\0\1\246\73\0\1\u013a\3\0"+
    "\1\250\1\0\1\250\73\0\1\u013b\3\0\1\231\1\252"+
    "\1\231\1\252\72\0\1\u013c\3\0\1\254\1\255\1\254"+
    "\1\255\72\0\1\u013d\3\0\1\257\1\0\1\257\51\0"+
    "\3\153\1\u013e\40\0\1\260\5\0\1\235\51\0\1\u013f"+
    "\3\0\1\370\1\0\1\370\77\0\1\u0132\75\0\1\u0140"+
    "\3\0\1\156\1\157\1\156\1\157\51\0\1\102\42\0"+
    "\1\161\15\0\1\162\20\0\1\103\42\0\1\163\6\0"+
    "\1\164\27\0\1\104\42\0\1\165\2\0\1\166\121\0"+
    "\1\u0141\34\0\1\u0142\3\0\1\270\1\0\1\270\51\0"+
    "\3\162\1\u0143\40\0\1\271\20\0\1\272\36\0\1\u0144"+
    "\4\0\1\u0101\1\0\1\u0101\72\0\1\u0145\101\0\1\u0146"+
    "\3\0\1\u0147\1\0\1\u0147\33\0\1\u0103\61\0\1\u0148"+
    "\21\0\1\u0149\35\0\1\u014a\3\0\1\274\1\0\1\274"+
    "\51\0\3\164\1\u014b\40\0\1\275\5\0\1\276\51\0"+
    "\1\u014c\3\0\1\u0107\1\0\1\u0107\77\0\1\u014d\75\0"+
    "\1\u014e\3\0\1\u014f\1\0\1\u014f\26\0\1\u0109\66\0"+
    "\1\u0150\2\0\1\u0151\54\0\1\u0152\3\0\1\300\1\0"+
    "\1\300\51\0\3\166\1\u0153\40\0\1\301\10\0\1\302"+
    "\46\0\1\u0154\3\0\1\u010d\1\0\1\u010d\102\0\1\u0155"+
    "\72\0\1\u0156\3\0\1\u0157\1\0\1\u0157\51\0\3\33"+
    "\1\167\13\0\1\33\2\0\5\u0158\1\u0159\1\u0158\1\u0159"+
    "\2\u0158\6\0\1\33\1\0\1\57\1\0\1\33\6\u0158"+
    "\17\33\4\0\1\33\1\0\3\33\1\167\13\0\1\33"+
    "\2\0\12\u0158\6\0\1\33\1\0\1\57\1\0\1\33"+
    "\6\u0158\17\33\4\0\1\33\1\0\3\33\1\167\13\0"+
    "\1\33\2\0\5\u0158\1\u015a\4\u0158\6\0\1\33\1\0"+
    "\1\57\1\0\1\33\6\u0158\17\33\4\0\1\33\1\0"+
    "\3\34\1\307\13\0\1\33\2\0\12\u0158\6\0\1\33"+
    "\1\0\1\110\1\0\1\33\6\u0158\11\33\1\111\5\33"+
    "\4\0\1\33\1\0\3\33\1\167\13\0\1\33\2\0"+
    "\1\u015b\4\u0111\1\u015c\1\u0111\1\u015c\2\u0111\6\0\1\33"+
    "\1\0\1\57\1\0\1\33\6\u0111\17\33\4\0\1\33"+
    "\1\0\3\33\1\167\13\0\1\33\2\0\2\u0111\1\u015d"+
    "\7\u0111\6\0\1\33\1\0\1\57\1\0\1\33\6\u0111"+
    "\17\33\4\0\1\33\1\0\3\111\1\u0117\13\0\1\33"+
    "\2\0\12\u0111\6\0\1\33\1\0\1\176\1\0\1\33"+
    "\6\u0111\4\33\1\177\12\33\4\0\1\33\2\0\1\111"+
    "\15\0\1\33\2\0\12\33\6\0\1\33\1\0\1\176"+
    "\1\0\13\33\1\177\12\33\4\0\1\33\1\0\3\33"+
    "\1\167\13\0\1\33\2\0\1\u015e\3\304\1\u015f\1\304"+
    "\1\u015f\3\304\6\0\1\33\1\0\1\57\1\0\1\33"+
    "\6\304\17\33\4\0\1\33\1\0\3\33\1\167\13\0"+
    "\1\33\2\0\12\304\6\0\1\33\1\0\1\57\1\0"+
    "\1\33\2\304\1\u0160\3\304\17\33\4\0\1\33\1\0"+
    "\3\177\1\u0161\6\0\1\315\4\0\1\33\2\0\12\304"+
    "\6\0\1\33\1\0\1\57\1\0\1\33\6\304\17\33"+
    "\4\0\1\33\1\0\4\u0162\1\u011b\1\0\3\u011b\2\0"+
    "\1\u011e\1\u011b\2\0\1\u011b\24\0\1\u011f\32\0\2\u011b"+
    "\2\u011c\3\0\1\u011c\1\u0162\36\u011c\1\u0163\34\u011c\2\u011d"+
    "\3\0\1\u011d\1\0\3\u011d\1\u0164\32\u011d\1\u0165\34\u011d"+
    "\2\u011b\3\0\16\u011b\12\u0166\13\u011b\6\u0166\24\u011b\27\0"+
    "\1\116\1\0\1\116\73\0\1\u0167\3\0\1\204\1\0"+
    "\1\204\52\0\1\120\42\0\1\205\20\0\1\206\36\0"+
    "\1\u0168\4\0\1\323\1\0\1\323\50\0\3\206\1\u0169"+
    "\40\0\1\324\17\0\1\325\37\0\1\u016a\3\0\1\u0126"+
    "\1\0\1\u0126\125\0\1\u016b\47\0\1\u016c\4\0\1\u016d"+
    "\1\0\1\u016d\34\0\1\u0128\57\0\1\u016e\23\0\1\u016f"+
    "\10\0\4\45\1\121\1\45\1\46\14\45\12\u0170\10\45"+
    "\1\47\2\45\6\u0170\24\45\1\0\3\50\1\210\13\0"+
    "\1\50\2\0\12\u0171\6\0\1\50\1\0\1\51\1\0"+
    "\1\50\6\u0171\17\50\4\0\1\50\4\52\1\125\1\52"+
    "\1\0\3\52\1\53\10\52\12\u0172\10\52\1\54\2\52"+
    "\6\u0172\24\52\27\0\1\132\1\133\1\132\1\133\72\0"+
    "\1\u0173\3\0\1\231\1\0\1\231\52\0\1\135\122\0"+
    "\1\u0174\3\0\1\233\1\0\1\233\52\0\1\137\42\0"+
    "\1\234\10\0\1\235\46\0\1\u0175\3\0\1\352\1\0"+
    "\1\352\51\0\3\235\1\u0176\120\0\1\u0177\3\0\1\237"+
    "\1\240\1\237\1\240\51\0\1\141\101\0\1\142\122\0"+
    "\1\u0178\4\0\1\242\1\0\1\242\72\0\1\u0179\4\0"+
    "\1\244\1\0\1\244\51\0\1\145\122\0\1\u017a\3\0"+
    "\1\246\1\0\1\246\73\0\1\u017b\3\0\1\250\1\0"+
    "\1\250\73\0\1\u017c\3\0\1\231\1\252\1\231\1\252"+
    "\72\0\1\u017d\3\0\1\254\1\255\1\254\1\255\72\0"+
    "\1\u017e\3\0\1\257\1\0\1\257\52\0\1\153\42\0"+
    "\1\260\5\0\1\235\51\0\1\u017f\3\0\1\370\1\0"+
    "\1\370\77\0\1\156\1\157\1\156\1\157\123\0\1\u0180"+
    "\50\0\1\u0181\3\0\1\270\1\0\1\270\52\0\1\162"+
    "\42\0\1\271\20\0\1\272\36\0\1\u0182\4\0\1\u0101"+
    "\1\0\1\u0101\50\0\3\272\1\u0183\40\0\1\u0102\17\0"+
    "\1\u0103\37\0\1\u0184\3\0\1\u0147\1\0\1\u0147\125\0"+
    "\1\u0185\47\0\1\u0186\4\0\1\u0187\1\0\1\u0187\34\0"+
    "\1\u0149\57\0\1\u0188\23\0\1\u0189\33\0\1\u018a\3\0"+
    "\1\274\1\0\1\274\52\0\1\164\42\0\1\275\5\0"+
    "\1\276\51\0\1\u018b\3\0\1\u0107\1\0\1\u0107\51\0"+
    "\3\276\1\u018c\40\0\1\u0108\12\0\1\u0109\44\0\1\u018d"+
    "\3\0\1\u014f\1\0\1\u014f\104\0\1\u018e\70\0\1\u018f"+
    "\3\0\1\u0190\1\0\1\u0190\73\0\1\u0191\3\0\1\300"+
    "\1\0\1\300\52\0\1\166\42\0\1\301\10\0\1\302"+
    "\46\0\1\u0192\3\0\1\u010d\1\0\1\u010d\51\0\3\302"+
    "\1\u0193\40\0\1\u010e\6\0\1\u010f\50\0\1\u0194\3\0"+
    "\1\u0157\1\0\1\u0157\100\0\1\u0195\52\0\3\33\1\167"+
    "\13\0\1\33\2\0\12\u0196\6\0\1\33\1\0\1\57"+
    "\1\0\1\33\6\u0196\17\33\4\0\1\33\1\0\3\33"+
    "\1\167\13\0\1\33\2\0\5\u0196\1\u0197\4\u0196\6\0"+
    "\1\33\1\0\1\57\1\0\1\33\6\u0196\17\33\4\0"+
    "\1\33\1\0\3\34\1\307\13\0\1\33\2\0\12\u0196"+
    "\6\0\1\33\1\0\1\110\1\0\1\33\6\u0196\11\33"+
    "\1\111\5\33\4\0\1\33\1\0\3\33\1\167\13\0"+
    "\1\33\2\0\5\u0158\1\u0198\1\u0158\1\u0198\2\u0158\6\0"+
    "\1\33\1\0\1\57\1\0\1\33\6\u0158\17\33\4\0"+
    "\1\33\1\0\3\33\1\167\13\0\1\33\2\0\2\u0158"+
    "\1\u0199\7\u0158\6\0\1\33\1\0\1\57\1\0\1\33"+
    "\6\u0158\17\33\4\0\1\33\1\0\3\111\1\u0117\13\0"+
    "\1\33\2\0\12\u0158\6\0\1\33\1\0\1\176\1\0"+
    "\1\33\6\u0158\4\33\1\177\12\33\4\0\1\33\1\0"+
    "\3\33\1\167\13\0\1\33\2\0\1\u019a\3\u0111\1\u019b"+
    "\1\u0111\1\u019b\3\u0111\6\0\1\33\1\0\1\57\1\0"+
    "\1\33\6\u0111\17\33\4\0\1\33\1\0\3\33\1\167"+
    "\13\0\1\33\2\0\12\u0111\6\0\1\33\1\0\1\57"+
    "\1\0\1\33\2\u0111\1\u019c\3\u0111\17\33\4\0\1\33"+
    "\1\0\3\177\1\u0161\6\0\1\315\4\0\1\33\2\0"+
    "\12\u0111\6\0\1\33\1\0\1\57\1\0\1\33\6\u0111"+
    "\17\33\4\0\1\33\2\0\1\177\10\0\1\315\4\0"+
    "\1\33\2\0\12\33\6\0\1\33\1\0\1\57\1\0"+
    "\26\33\4\0\1\33\1\0\4\u0162\7\0\1\u011e\65\0"+
    "\4\u011c\1\u019d\1\u011c\1\u019e\14\u011c\12\u019f\10\u011c\1\u0163"+
    "\2\u011c\6\u019f\24\u011c\1\u011d\1\u0164\3\u0162\1\u011d\1\0"+
    "\3\u011d\1\u0164\1\u011d\1\u01a0\30\u011d\1\u0165\40\u011d\1\u01a1"+
    "\5\u011d\1\u0164\10\u011d\12\u01a2\10\u011d\1\u0165\2\u011d\6\u01a2"+
    "\24\u011d\1\0\3\u011b\1\u01a3\1\u011b\1\0\3\u011b\2\0"+
    "\1\u011e\1\u011b\2\0\1\u011b\2\0\12\u01a4\10\0\1\u011f"+
    "\2\0\6\u01a4\22\0\2\u011b\27\0\1\204\1\0\1\204"+
    "\73\0\1\u01a5\4\0\1\323\1\0\1\323\51\0\1\206"+
    "\42\0\1\324\17\0\1\325\37\0\1\u01a6\3\0\1\u0126"+
    "\1\0\1\u0126\51\0\3\325\1\u01a7\40\0\1\u0127\21\0"+
    "\1\u0128\35\0\1\u01a8\4\0\1\u016d\1\0\1\u016d\74\0"+
    "\1\u01a9\77\0\1\u01aa\4\0\1\u01ab\1\0\1\u01ab\36\0"+
    "\1\u016f\55\0\1\u01ac\2\0\1\u01ad\31\0\4\45\1\121"+
    "\1\45\1\46\14\45\12\u01ae\10\45\1\47\2\45\6\u01ae"+
    "\24\45\1\0\3\50\1\210\13\0\1\50\2\0\12\u01af"+
    "\6\0\1\50\1\0\1\51\1\0\1\50\6\u01af\17\50"+
    "\4\0\1\50\4\52\1\125\1\52\1\0\3\52\1\53"+
    "\10\52\12\u01b0\10\52\1\54\2\52\6\u01b0\24\52\27\0"+
    "\1\231\1\0\1\231\77\0\1\233\1\0\1\233\73\0"+
    "\1\u01b1\3\0\1\352\1\0\1\352\52\0\1\235\126\0"+
    "\1\237\1\240\1\237\1\240\77\0\1\242\1\0\1\242"+
    "\77\0\1\244\1\0\1\244\76\0\1\246\1\0\1\246"+
    "\77\0\1\250\1\0\1\250\77\0\1\231\1\252\1\231"+
    "\1\252\76\0\1\254\1\255\1\254\1\255\76\0\1\257"+
    "\1\0\1\257\73\0\1\u01b2\3\0\1\370\1\0\1\370"+
    "\141\0\1\u01b3\37\0\1\270\1\0\1\270\73\0\1\u01b4"+
    "\4\0\1\u0101\1\0\1\u0101\51\0\1\272\42\0\1\u0102"+
    "\17\0\1\u0103\37\0\1\u01b5\3\0\1\u0147\1\0\1\u0147"+
    "\51\0\3\u0103\1\u01b6\40\0\1\u0148\21\0\1\u0149\35\0"+
    "\1\u01b7\4\0\1\u0187\1\0\1\u0187\74\0\1\u01b8\77\0"+
    "\1\u01b9\4\0\1\u01ba\1\0\1\u01ba\36\0\1\u0189\37\0"+
    "\1\274\1\0\1\274\73\0\1\u01bb\3\0\1\u0107\1\0"+
    "\1\u0107\52\0\1\276\42\0\1\u0108\12\0\1\u0109\44\0"+
    "\1\u01bc\3\0\1\u014f\1\0\1\u014f\51\0\3\u0109\1\u01bd"+
    "\40\0\1\u0150\2\0\1\u0151\54\0\1\u01be\3\0\1\u0190"+
    "\1\0\1\u0190\74\0\1\u01bf\104\0\1\300\1\0\1\300"+
    "\73\0\1\u01c0\3\0\1\u010d\1\0\1\u010d\52\0\1\302"+
    "\42\0\1\u010e\6\0\1\u010f\50\0\1\u01c1\3\0\1\u0157"+
    "\1\0\1\u0157\51\0\3\u010f\1\u01c2\76\0\3\33\1\167"+
    "\13\0\1\33\2\0\12\33\6\0\1\33\1\0\1\57"+
    "\1\0\26\33\4\0\1\33\1\0\3\34\1\307\13\0"+
    "\1\33\2\0\12\33\6\0\1\33\1\0\1\110\1\0"+
    "\20\33\1\111\5\33\4\0\1\33\1\0\3\33\1\167"+
    "\13\0\1\33\2\0\2\u0196\1\u01c3\7\u0196\6\0\1\33"+
    "\1\0\1\57\1\0\1\33\6\u0196\17\33\4\0\1\33"+
    "\1\0\3\111\1\u0117\13\0\1\33\2\0\12\u0196\6\0"+
    "\1\33\1\0\1\176\1\0\1\33\6\u0196\4\33\1\177"+
    "\12\33\4\0\1\33\1\0\3\33\1\167\13\0\1\33"+
    "\2\0\4\u0158\1\u01c4\1\u0158\1\u01c4\3\u0158\6\0\1\33"+
    "\1\0\1\57\1\0\1\33\6\u0158\17\33\4\0\1\33"+
    "\1\0\3\33\1\167\13\0\1\33\2\0\12\u0158\6\0"+
    "\1\33\1\0\1\57\1\0\1\33\2\u0158\1\u01c5\3\u0158"+
    "\17\33\4\0\1\33\1\0\3\177\1\u0161\6\0\1\315"+
    "\4\0\1\33\2\0\12\u0158\6\0\1\33\1\0\1\57"+
    "\1\0\1\33\6\u0158\17\33\4\0\1\33\3\u011c\2\0"+
    "\1\u011c\1\u0162\36\u011c\1\u0163\35\u011c\1\u019e\3\u0162\1\u011c"+
    "\1\u0162\5\u011c\1\u01c6\30\u011c\1\u0163\40\u011c\1\u019d\1\u011c"+
    "\1\u0162\14\u011c\12\u01c7\10\u011c\1\u0163\2\u011c\6\u01c7\24\u011c"+
    "\3\u011d\2\0\1\u011d\1\0\3\u011d\1\u0164\32\u011d\1\u0165"+
    "\40\u011d\1\u01a1\1\u011d\1\0\3\u011d\1\u0164\10\u011d\12\u01c8"+
    "\10\u011d\1\u0165\2\u011d\6\u01c8\24\u011d\1\0\1\u0162\1\u011b"+
    "\2\u0162\1\u011b\1\0\3\u011b\2\0\1\u011e\1\u011b\2\0"+
    "\1\u011b\24\0\1\u011f\32\0\2\u011b\1\0\3\u011b\1\u01a3"+
    "\1\u011b\1\0\3\u011b\2\0\1\u011e\1\u011b\2\0\1\u011b"+
    "\2\0\12\u01c9\10\0\1\u011f\2\0\6\u01c9\22\0\2\u011b"+
    "\30\0\1\323\1\0\1\323\72\0\1\u01ca\3\0\1\u0126"+
    "\1\0\1\u0126\52\0\1\325\42\0\1\u0127\21\0\1\u0128"+
    "\35\0\1\u01cb\4\0\1\u016d\1\0\1\u016d\50\0\3\u0128"+
    "\1\u01cc\40\0\1\u016e\23\0\1\u016f\33\0\1\u01cd\4\0"+
    "\1\u01ab\1\0\1\u01ab\76\0\1\u01ce\75\0\1\u01cf\3\0"+
    "\1\u01d0\1\0\1\u01d0\115\0\1\u01d1\16\0\1\u01d2\15\0"+
    "\4\45\1\121\1\45\1\46\36\45\1\47\34\45\1\0"+
    "\3\50\1\210\13\0\1\50\2\0\12\50\6\0\1\50"+
    "\1\0\1\51\1\0\26\50\4\0\1\50\4\52\1\125"+
    "\1\52\1\0\3\52\1\53\32\52\1\54\34\52\27\0"+
    "\1\352\1\0\1\352\77\0\1\370\1\0\1\370\100\0"+
    "\1\u0101\1\0\1\u0101\72\0\1\u01d3\3\0\1\u0147\1\0"+
    "\1\u0147\52\0\1\u0103\42\0\1\u0148\21\0\1\u0149\35\0"+
    "\1\u01d4\4\0\1\u0187\1\0\1\u0187\50\0\3\u0149\1\u01d5"+
    "\40\0\1\u0188\23\0\1\u0189\33\0\1\u01d6\4\0\1\u01ba"+
    "\1\0\1\u01ba\76\0\1\u01d7\101\0\1\u0107\1\0\1\u0107"+
    "\73\0\1\u01d8\3\0\1\u014f\1\0\1\u014f\52\0\1\u0109"+
    "\42\0\1\u0150\2\0\1\u0151\54\0\1\u01d9\3\0\1\u0190"+
    "\1\0\1\u0190\51\0\3\u0151\1\u01da\124\0\1\u010d\1\0"+
    "\1\u010d\73\0\1\u01db\3\0\1\u0157\1\0\1\u0157\52\0"+
    "\1\u010f\100\0\3\111\1\u0117\13\0\1\33\2\0\12\33"+
    "\6\0\1\33\1\0\1\176\1\0\13\33\1\177\12\33"+
    "\4\0\1\33\1\0\3\33\1\167\13\0\1\33\2\0"+
    "\12\u0196\6\0\1\33\1\0\1\57\1\0\1\33\2\u0196"+
    "\1\u01dc\3\u0196\17\33\4\0\1\33\1\0\3\177\1\u0161"+
    "\6\0\1\315\4\0\1\33\2\0\12\u0196\6\0\1\33"+
    "\1\0\1\57\1\0\1\33\6\u0196\17\33\4\0\1\33"+
    "\4\u011c\1\u019d\1\u011c\1\u0162\14\u011c\12\u01dd\10\u011c\1\u0163"+
    "\2\u011c\6\u01dd\24\u011c\4\u011d\1\u01a1\1\u011d\1\0\3\u011d"+
    "\1\u0164\10\u011d\12\u01de\10\u011d\1\u0165\2\u011d\6\u01de\24\u011d"+
    "\1\0\3\u011b\1\u01a3\1\u011b\1\0\3\u011b\2\0\1\u011e"+
    "\1\u011b\2\0\1\u011b\2\0\12\u01df\10\0\1\u011f\2\0"+
    "\6\u01df\22\0\2\u011b\27\0\1\u0126\1\0\1\u0126\73\0"+
    "\1\u01e0\4\0\1\u016d\1\0\1\u016d\51\0\1\u0128\42\0"+
    "\1\u016e\23\0\1\u016f\33\0\1\u01e1\4\0\1\u01ab\1\0"+
    "\1\u01ab\50\0\3\u016f\1\u01e2\40\0\1\u01ac\2\0\1\u01ad"+
    "\54\0\1\u01e3\3\0\1\u01d0\1\0\1\u01d0\74\0\1\u01e4"+
    "\100\0\1\u01e5\3\0\1\u01e6\1\0\1\u01e6\32\0\1\u01d2"+
    "\62\0\1\u01e7\23\0\1\u01e8\37\0\1\u0147\1\0\1\u0147"+
    "\73\0\1\u01e9\4\0\1\u0187\1\0\1\u0187\51\0\1\u0149"+
    "\42\0\1\u0188\23\0\1\u0189\33\0\1\u01ea\4\0\1\u01ba"+
    "\1\0\1\u01ba\50\0\3\u0189\1\u01eb\124\0\1\u014f\1\0"+
    "\1\u014f\73\0\1\u01ec\3\0\1\u0190\1\0\1\u0190\52\0"+
    "\1\u0151\126\0\1\u0157\1\0\1\u0157\51\0\3\177\1\u0161"+
    "\6\0\1\315\4\0\1\33\2\0\12\33\6\0\1\33"+
    "\1\0\1\57\1\0\26\33\4\0\1\33\4\u011c\1\u019d"+
    "\1\u011c\1\u0162\14\u011c\12\u01ed\10\u011c\1\u0163\2\u011c\6\u01ed"+
    "\24\u011c\4\u011d\1\u01a1\1\u011d\1\0\3\u011d\1\u0164\10\u011d"+
    "\12\u01ee\10\u011d\1\u0165\2\u011d\6\u01ee\24\u011d\1\0\3\u011b"+
    "\1\u01a3\1\u011b\1\0\3\u011b\2\0\1\u011e\1\u011b\2\0"+
    "\1\u011b\2\0\12\u01ef\10\0\1\u011f\2\0\6\u01ef\22\0"+
    "\2\u011b\30\0\1\u016d\1\0\1\u016d\72\0\1\u01f0\4\0"+
    "\1\u01ab\1\0\1\u01ab\51\0\1\u016f\42\0\1\u01ac\2\0"+
    "\1\u01ad\54\0\1\u01f1\3\0\1\u01d0\1\0\1\u01d0\51\0"+
    "\3\u01ad\1\u01f2\40\0\1\u01d1\16\0\1\u01d2\40\0\1\u01f3"+
    "\3\0\1\u01e6\1\0\1\u01e6\124\0\1\u01f4\50\0\1\u01f5"+
    "\4\0\1\u01f6\1\0\1\u01f6\36\0\1\u01e8\40\0\1\u0187"+
    "\1\0\1\u0187\72\0\1\u01f7\4\0\1\u01ba\1\0\1\u01ba"+
    "\51\0\1\u0189\126\0\1\u0190\1\0\1\u0190\50\0\4\u011c"+
    "\1\u019d\1\u011c\1\u0162\14\u011c\12\u01f8\10\u011c\1\u0163\2\u011c"+
    "\6\u01f8\24\u011c\4\u011d\1\u01a1\1\u011d\1\0\3\u011d\1\u0164"+
    "\10\u011d\12\u01f9\10\u011d\1\u0165\2\u011d\6\u01f9\24\u011d\1\0"+
    "\3\u011b\1\u01a3\1\u011b\1\0\3\u011b\2\0\1\u011e\1\u011b"+
    "\2\0\1\u011b\2\0\12\u01fa\10\0\1\u011f\2\0\6\u01fa"+
    "\22\0\2\u011b\30\0\1\u01ab\1\0\1\u01ab\72\0\1\u01fb"+
    "\3\0\1\u01d0\1\0\1\u01d0\52\0\1\u01ad\42\0\1\u01d1"+
    "\16\0\1\u01d2\40\0\1\u01fc\3\0\1\u01e6\1\0\1\u01e6"+
    "\51\0\3\u01d2\1\u01fd\40\0\1\u01e7\23\0\1\u01e8\33\0"+
    "\1\u01fe\4\0\1\u01f6\1\0\1\u01f6\76\0\1\u01ff\102\0"+
    "\1\u01ba\1\0\1\u01ba\47\0\4\u011c\1\u019d\1\u011c\1\u0162"+
    "\14\u011c\12\u0200\10\u011c\1\u0163\2\u011c\6\u0200\24\u011c\4\u011d"+
    "\1\u01a1\1\u011d\1\0\3\u011d\1\u0164\10\u011d\12\u0201\10\u011d"+
    "\1\u0165\2\u011d\6\u0201\24\u011d\1\0\3\u011b\1\u01a3\1\u011b"+
    "\1\0\3\u011b\2\0\1\u011e\1\u011b\2\0\1\u011b\24\0"+
    "\1\u011f\32\0\2\u011b\27\0\1\u01d0\1\0\1\u01d0\73\0"+
    "\1\u0202\3\0\1\u01e6\1\0\1\u01e6\52\0\1\u01d2\42\0"+
    "\1\u01e7\23\0\1\u01e8\33\0\1\u0203\4\0\1\u01f6\1\0"+
    "\1\u01f6\50\0\3\u01e8\1\u0204\75\0\4\u011c\1\u019d\1\u011c"+
    "\1\u0162\36\u011c\1\u0163\34\u011c\4\u011d\1\u01a1\1\u011d\1\0"+
    "\3\u011d\1\u0164\32\u011d\1\u0165\34\u011d\27\0\1\u01e6\1\0"+
    "\1\u01e6\73\0\1\u0205\4\0\1\u01f6\1\0\1\u01f6\51\0"+
    "\1\u01e8\127\0\1\u01f6\1\0\1\u01f6\47\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[31482];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\3\11\1\1\1\11\4\1\2\11"+
    "\1\1\2\11\2\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\1\1\5\0\1\11\1\0\1\1\2\0"+
    "\1\1\4\0\1\1\1\0\1\11\13\0\1\11\6\0"+
    "\3\1\1\0\1\1\2\11\6\0\1\1\1\0\1\1"+
    "\2\0\1\11\5\0\1\11\3\0\2\11\2\0\1\11"+
    "\21\0\7\1\1\0\1\1\10\0\2\1\1\0\1\11"+
    "\13\0\1\1\5\0\1\11\23\0\1\11\21\0\12\1"+
    "\12\0\1\1\14\0\1\1\1\0\1\1\5\0\2\1"+
    "\2\0\1\1\36\0\1\11\13\1\3\0\1\11\13\0"+
    "\1\1\3\0\1\1\3\0\1\1\1\0\2\1\2\0"+
    "\1\1\30\0\1\11\6\0\12\1\17\0\1\1\4\0"+
    "\1\1\22\0\1\11\13\0\10\1\3\0\1\1\16\0"+
    "\1\1\3\0\1\11\13\0\1\1\2\0\5\1\20\0"+
    "\1\1\2\0\1\1\1\0\1\1\13\0\1\11\2\0"+
    "\1\1\23\0\1\1\4\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[517];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public CssLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CssLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 40: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 41: break;
          case 3:
            { return PARENTHESES_OPEN;
            }
          // fall through
          case 42: break;
          case 4:
            { return PARENTHESES_CLOSE;
            }
          // fall through
          case 43: break;
          case 5:
            { return OP_MULTI;
            }
          // fall through
          case 44: break;
          case 6:
            { return OP_PLUS;
            }
          // fall through
          case 45: break;
          case 7:
            { return COMMA;
            }
          // fall through
          case 46: break;
          case 8:
            { return DOT;
            }
          // fall through
          case 47: break;
          case 9:
            { return OP_DIVIDE;
            }
          // fall through
          case 48: break;
          case 10:
            { return NUMBER;
            }
          // fall through
          case 49: break;
          case 11:
            { return COLON;
            }
          // fall through
          case 50: break;
          case 12:
            { return SEMI_COLON;
            }
          // fall through
          case 51: break;
          case 13:
            { return OP_EQUALS;
            }
          // fall through
          case 52: break;
          case 14:
            { return GREATER_THAN;
            }
          // fall through
          case 53: break;
          case 15:
            { return IDENT;
            }
          // fall through
          case 54: break;
          case 16:
            { return SQUARE_BRACKET_OPEN;
            }
          // fall through
          case 55: break;
          case 17:
            { return SQUARE_BRACKET_CLOSE;
            }
          // fall through
          case 56: break;
          case 18:
            { return BRACKET_OPEN;
            }
          // fall through
          case 57: break;
          case 19:
            { return BRACKET_CLOSE;
            }
          // fall through
          case 58: break;
          case 20:
            { return STRING;
            }
          // fall through
          case 59: break;
          case 21:
            { return HASH;
            }
          // fall through
          case 60: break;
          case 22:
            { return PERCENTAGE;
            }
          // fall through
          case 61: break;
          case 23:
            { return TIME;
            }
          // fall through
          case 62: break;
          case 24:
            { return DASHMATCH;
            }
          // fall through
          case 63: break;
          case 25:
            { return INCLUDES;
            }
          // fall through
          case 64: break;
          case 26:
            { return CDC;
            }
          // fall through
          case 65: break;
          case 27:
            { return LENGTH;
            }
          // fall through
          case 66: break;
          case 28:
            { return EMS;
            }
          // fall through
          case 67: break;
          case 29:
            { return EXS;
            }
          // fall through
          case 68: break;
          case 30:
            { return FREQ;
            }
          // fall through
          case 69: break;
          case 31:
            { return COMMENT;
            }
          // fall through
          case 70: break;
          case 32:
            { return ANGLE;
            }
          // fall through
          case 71: break;
          case 33:
            { return CDO;
            }
          // fall through
          case 72: break;
          case 34:
            { return PAGE_SYM;
            }
          // fall through
          case 73: break;
          case 35:
            { return URI;
            }
          // fall through
          case 74: break;
          case 36:
            { return MEDIA_SYM;
            }
          // fall through
          case 75: break;
          case 37:
            { return IMPORT_SYM;
            }
          // fall through
          case 76: break;
          case 38:
            { return CHARSET_SYM;
            }
          // fall through
          case 77: break;
          case 39:
            { return IMPORTANT_SYM;
            }
          // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
